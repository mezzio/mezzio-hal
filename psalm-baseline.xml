<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.6.0@e784128902dfe01d489c4123d69918a9f3c1eac5">
  <file src="src/HalResource.php">
    <DocblockTypeContradiction>
      <code>is_object($resource)</code>
    </DocblockTypeContradiction>
    <MissingClosureParamType>
      <code>$key</code>
      <code>$links</code>
      <code>$name</code>
      <code>$name</code>
      <code>$rel</code>
      <code>$resource</code>
      <code>$value</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>function ($item) {</code>
      <code>function (array $byRelation, LinkInterface $link) {</code>
    </MissingClosureReturnType>
    <MixedArgument>
      <code>$links</code>
      <code>$links</code>
      <code>$name</code>
      <code>$name</code>
      <code>$relation</code>
      <code>$relation</code>
      <code>$relations</code>
      <code>$resource</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
      <code>$resource</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$byRelation[$rel]</code>
      <code>$relations[$key]</code>
      <code>$relations[$key][Link::AS_COLLECTION]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code>$byRelation[$rel]</code>
      <code>$embedded[$name]</code>
      <code>$relation[Link::AS_COLLECTION]</code>
      <code>$relation[]</code>
      <code>$relations[$key]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code>$byRelation[$rel]</code>
      <code>$byRelation[$rel]</code>
      <code>$byRelation[$rel]</code>
      <code>$relations[$key]</code>
      <code>$relations[$key]</code>
      <code>$relations[$key]</code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$relations</code>
      <code>$relations[$key]</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>toArray</code>
    </MixedMethodCall>
    <MixedPropertyTypeCoercion>
      <code>$this-&gt;embedded</code>
      <code>$this-&gt;embedded</code>
      <code>$this-&gt;embedded</code>
    </MixedPropertyTypeCoercion>
    <MixedReturnStatement>
      <code>$embedded</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion>
      <code>$forceCollection ? [$resource] : $resource</code>
      <code>$this-&gt;aggregateEmbeddedCollection($name, $resource, $context)</code>
      <code>HalResource|HalResource[]</code>
    </MixedReturnTypeCoercion>
    <RedundantConditionGivenDocblockType>
      <code>gettype($resource)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/HalResponseFactory.php">
    <MixedArgument>
      <code>$matchedType-&gt;getValue()</code>
    </MixedArgument>
    <UndefinedInterfaceMethod>
      <code>getValue</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/HalResponseFactoryFactory.php">
    <MixedArgument>
      <code>$jsonRenderer</code>
      <code>$xmlRenderer</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$jsonRenderer</code>
      <code>$xmlRenderer</code>
    </MixedAssignment>
    <UndefinedDocblockClass>
      <code>RuntimeException</code>
    </UndefinedDocblockClass>
  </file>
  <file src="src/Link.php">
    <InvalidCast>
      <code>$uri</code>
    </InvalidCast>
    <MixedArgument>
      <code>is_object($rel) ? $rel::class : gettype($rel)</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string|string[]</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>is_string($relation) ? [$relation] : $relation</code>
      <code>is_string($relation) ? [$relation] : $relation</code>
    </MixedReturnStatement>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$this-&gt;validateRelation($relation)</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <RedundantCondition>
      <code>gettype($rel)</code>
      <code>is_object($href)</code>
      <code>is_string($uri)</code>
    </RedundantCondition>
    <TypeDoesNotContainType>
      <code>! is_string($attribute)</code>
      <code>! is_string($rel)</code>
      <code>! is_string($rel)</code>
      <code>(string) $uri</code>
      <code>gettype($href)</code>
      <code>is_object($href)</code>
      <code>is_object($rel)</code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/LinkCollection.php">
    <LessSpecificImplementedReturnType>
      <code>self</code>
      <code>self</code>
    </LessSpecificImplementedReturnType>
    <MissingParamType>
      <code>$rel</code>
    </MissingParamType>
  </file>
  <file src="src/LinkGenerator/MezzioUrlGeneratorFactory.php">
    <MixedArgument>
      <code>$container-&gt;get($this-&gt;urlHelperServiceName)</code>
      <code>$container-&gt;has(ServerUrlHelper::class)
                ? $container-&gt;get(ServerUrlHelper::class)
                : ($container-&gt;has(\Zend\Expressive\Helper\ServerUrlHelper::class)
                    ? $container-&gt;get(\Zend\Expressive\Helper\ServerUrlHelper::class)
                    : null)</code>
      <code>$data['urlHelperServiceName'] ?? UrlHelper::class</code>
    </MixedArgument>
  </file>
  <file src="src/LinkGeneratorFactory.php">
    <MixedArgument>
      <code>$container-&gt;get($this-&gt;urlGeneratorServiceName)</code>
      <code>$data['urlGeneratorServiceName'] ?? LinkGenerator\UrlGeneratorInterface::class</code>
    </MixedArgument>
  </file>
  <file src="src/Metadata/AbstractMetadata.php">
    <MissingConstructor>
      <code>$class</code>
    </MissingConstructor>
  </file>
  <file src="src/Metadata/Exception/InvalidConfigException.php">
    <MixedAssignment>
      <code>$className</code>
    </MixedAssignment>
  </file>
  <file src="src/Metadata/MetadataMapFactory.php">
    <InvalidStringClass>
      <code>new $factoryClass()</code>
    </InvalidStringClass>
    <MixedArgument>
      <code>$metadataFactories</code>
      <code>$metadataFactories[$metadataClass]</code>
      <code>$metadata['__class__']</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$config['mezzio-hal']</code>
      <code>$config['mezzio-hal']['metadata-factories']</code>
      <code>$config[MetadataMap::class]</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$config</code>
      <code>$metadataFactories</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>AbstractMetadata</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>$this-&gt;$method($metadata)</code>
    </MixedReturnStatement>
  </file>
  <file src="src/Metadata/RouteBasedCollectionMetadataFactory.php">
    <InvalidStringClass>
      <code>new $requestedName(
            $metadata['collection_class'],
            $metadata['collection_relation'],
            $metadata['route'],
            $metadata['pagination_param'] ?? 'page',
            $metadata['pagination_param_type'] ?? RouteBasedCollectionMetadata::TYPE_QUERY,
            $metadata['route_params'] ?? [],
            $metadata['query_string_arguments'] ?? []
        )</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code>new $requestedName(
            $metadata['collection_class'],
            $metadata['collection_relation'],
            $metadata['route'],
            $metadata['pagination_param'] ?? 'page',
            $metadata['pagination_param_type'] ?? RouteBasedCollectionMetadata::TYPE_QUERY,
            $metadata['route_params'] ?? [],
            $metadata['query_string_arguments'] ?? []
        )</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>AbstractMetadata</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Metadata/RouteBasedResourceMetadataFactory.php">
    <InvalidStringClass>
      <code>new $requestedName(
            $metadata['resource_class'],
            $metadata['route'],
            $metadata['extractor'],
            $metadata['resource_identifier'] ?? 'id',
            $metadata['route_params'] ?? [],
            $metadata['identifiers_to_placeholders_mapping'] ?? ['id' =&gt; 'id'],
            $metadata['max_depth'] ?? 10
        )</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code>new $requestedName(
            $metadata['resource_class'],
            $metadata['route'],
            $metadata['extractor'],
            $metadata['resource_identifier'] ?? 'id',
            $metadata['route_params'] ?? [],
            $metadata['identifiers_to_placeholders_mapping'] ?? ['id' =&gt; 'id'],
            $metadata['max_depth'] ?? 10
        )</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>AbstractMetadata</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Metadata/UrlBasedCollectionMetadataFactory.php">
    <InvalidStringClass>
      <code>new $requestedName(
            $metadata['collection_class'],
            $metadata['collection_relation'],
            $metadata['url'],
            $metadata['pagination_param'] ?? 'page',
            $metadata['pagination_param_type'] ?? UrlBasedCollectionMetadata::TYPE_QUERY
        )</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code>new $requestedName(
            $metadata['collection_class'],
            $metadata['collection_relation'],
            $metadata['url'],
            $metadata['pagination_param'] ?? 'page',
            $metadata['pagination_param_type'] ?? UrlBasedCollectionMetadata::TYPE_QUERY
        )</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>AbstractMetadata</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Metadata/UrlBasedResourceMetadataFactory.php">
    <InvalidStringClass>
      <code>new $requestedName(
            $metadata['resource_class'],
            $metadata['url'],
            $metadata['extractor'],
            $metadata['max_depth'] ?? 10
        )</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code>new $requestedName(
            $metadata['resource_class'],
            $metadata['url'],
            $metadata['extractor'],
            $metadata['max_depth'] ?? 10
        )</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>AbstractMetadata</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Renderer/XmlRenderer.php">
    <InvalidReturnStatement>
      <code>$elements</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>DOMNode|false|list&lt;DOMNode|false|list&lt;DOMNode|array&lt;array-key, DOMNode&gt;&gt;&gt;</code>
    </InvalidReturnType>
    <MixedArgument>
      <code>$attribute</code>
      <code>$childDatum</code>
      <code>$linkDatum</code>
      <code>$resource['_links']['self']['href']</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$key</code>
      <code>$key</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$resource['_links']['self']['href']</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$attribute</code>
      <code>$child</code>
      <code>$childDatum</code>
      <code>$data</code>
      <code>$linkDatum</code>
      <code>$resource['_embedded']</code>
      <code>$resource['_links']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <PossibleRawObjectIteration>
      <code>$resource['_links']</code>
    </PossibleRawObjectIteration>
    <PossiblyFalseArgument>
      <code>$element</code>
    </PossiblyFalseArgument>
    <PossiblyInvalidArgument>
      <code>$child</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/ResourceGenerator/ExtractCollectionTrait.php">
    <MethodSignatureMismatch>
      <code>abstract protected function generateSelfLink(
        AbstractCollectionMetadata $metadata,
        ResourceGeneratorInterface $resourceGenerator,
        ServerRequestInterface $request
    ): Link;</code>
      <code>abstract protected function generateSelfLink(
        AbstractCollectionMetadata $metadata,
        ResourceGeneratorInterface $resourceGenerator,
        ServerRequestInterface $request
    ): Link;</code>
    </MethodSignatureMismatch>
    <MixedArgument>
      <code>$item</code>
      <code>$item</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$links</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$count</code>
      <code>$count</code>
      <code>$item</code>
      <code>$item</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$count</code>
    </MixedOperand>
    <PossiblyNullOperand>
      <code>$perPage</code>
      <code>$perPage</code>
    </PossiblyNullOperand>
    <UndefinedInterfaceMethod>
      <code>count</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/ResourceGenerator/ExtractInstanceTrait.php">
    <MixedArgument>
      <code>$metadata-&gt;getExtractor()</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$array[$key]</code>
      <code>$childData</code>
    </MixedAssignment>
    <UndefinedMethod>
      <code>getExtractor</code>
    </UndefinedMethod>
  </file>
  <file src="src/ResourceGenerator/RouteBasedCollectionStrategy.php">
    <DocblockTypeContradiction>
      <code>[]</code>
    </DocblockTypeContradiction>
    <MethodSignatureMismatch>
      <code>protected function generateSelfLink(</code>
    </MethodSignatureMismatch>
    <MixedArgument>
      <code>$metadata-&gt;getQueryStringArguments() ?? []</code>
      <code>$metadata-&gt;getRoute()</code>
      <code>$queryParams</code>
      <code>$queryStringArgs</code>
      <code>$route</code>
      <code>$routeParams</code>
      <code>$routeParams</code>
      <code>$routeParams</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$queryStringArgs</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$queryParams</code>
      <code>$queryStringArgs</code>
      <code>$route</code>
      <code>$routeParams</code>
      <code>$routeParams</code>
      <code>$routeParams</code>
    </MixedAssignment>
    <RedundantConditionGivenDocblockType>
      <code>$request-&gt;getQueryParams()</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedMethod>
      <code>getQueryStringArguments</code>
      <code>getQueryStringArguments</code>
      <code>getRoute</code>
      <code>getRoute</code>
      <code>getRouteParams</code>
      <code>getRouteParams</code>
    </UndefinedMethod>
  </file>
  <file src="src/ResourceGenerator/RouteBasedResourceStrategy.php">
    <MixedArgumentTypeCoercion>
      <code>$routeParams</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayOffset>
      <code>$routeParams[$placeholderMap[$key]]</code>
    </MixedArrayOffset>
  </file>
  <file src="src/ResourceGenerator/UrlBasedCollectionStrategy.php">
    <InvalidArgument>
      <code>$page</code>
    </InvalidArgument>
    <MethodSignatureMismatch>
      <code>protected function generateSelfLink(</code>
    </MethodSignatureMismatch>
    <MixedArgument>
      <code>$url</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$url</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$url</code>
    </MixedOperand>
    <RedundantConditionGivenDocblockType>
      <code>$queryStringArgs !== null</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedMethod>
      <code>getUrl</code>
      <code>getUrl</code>
    </UndefinedMethod>
  </file>
  <file src="src/ResourceGeneratorFactory.php">
    <MissingDependency>
      <code>HydratorPluginManager</code>
    </MissingDependency>
    <MixedArgument>
      <code>$container-&gt;get($strategy)</code>
      <code>$container-&gt;get($this-&gt;linkGeneratorServiceName)</code>
      <code>$container-&gt;get(HydratorPluginManager::class)</code>
      <code>$container-&gt;get(Metadata\MetadataMap::class)</code>
      <code>$data['linkGeneratorServiceName'] ?? LinkGenerator::class</code>
      <code>$strategy</code>
      <code>HydratorPluginManager::class</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$config['mezzio-hal']['resource-generator']</code>
      <code>$config['mezzio-hal']['resource-generator']['strategies']</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$strategy</code>
    </MixedAssignment>
  </file>
  <file src="test/Assertions.php">
    <DeprecatedClass>
      <code>ObjectProperty::class</code>
    </DeprecatedClass>
    <MixedArgument>
      <code>$actual-&gt;getHref()</code>
      <code>$actual-&gt;getRels()</code>
    </MixedArgument>
    <MixedMethodCall>
      <code>getHref</code>
      <code>getHref</code>
      <code>getRels</code>
      <code>getRels</code>
    </MixedMethodCall>
    <MoreSpecificReturnType>
      <code>Link</code>
    </MoreSpecificReturnType>
    <RedundantCondition>
      <code>assertIsArray</code>
    </RedundantCondition>
  </file>
  <file src="test/ConfigProviderTest.php">
    <RedundantCondition>
      <code>assertIsArray</code>
    </RedundantCondition>
  </file>
  <file src="test/ExceptionTest.php">
    <MixedInferredReturnType>
      <code>Generator</code>
    </MixedInferredReturnType>
    <PossiblyFalseOperand>
      <code>strrpos(ExceptionInterface::class, '\\')</code>
    </PossiblyFalseOperand>
  </file>
  <file src="test/HalResourceTest.php">
    <InvalidArgument>
      <code>$links</code>
      <code>['foo' =&gt; $embedded]</code>
      <code>['foo' =&gt; 'bar']</code>
    </InvalidArgument>
    <MixedArgument>
      <code>$representation['_embedded']</code>
      <code>$representation['_embedded']</code>
      <code>$representation['_embedded']</code>
      <code>$representation['_embedded']</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$representation['_embedded']['foo']</code>
      <code>$representation['_embedded']['foo']</code>
      <code>$representation['_embedded']['foo']</code>
      <code>$representation['_embedded']['foo']</code>
    </MixedArrayAccess>
  </file>
  <file src="test/HalResponseFactoryFactoryTest.php">
    <DeprecatedMethod>
      <code>self::assertAttributeInstanceOf(Renderer\JsonRenderer::class, 'jsonRenderer', $instance)</code>
      <code>self::assertAttributeInstanceOf(Renderer\XmlRenderer::class, 'xmlRenderer', $instance)</code>
      <code>self::assertAttributeSame($jsonRenderer, 'jsonRenderer', $instance)</code>
      <code>self::assertAttributeSame($jsonRenderer, 'jsonRenderer', $instance)</code>
      <code>self::assertAttributeSame($xmlRenderer, 'xmlRenderer', $instance)</code>
      <code>self::assertAttributeSame($xmlRenderer, 'xmlRenderer', $instance)</code>
    </DeprecatedMethod>
    <UndefinedClass>
      <code>StreamInterface</code>
      <code>StreamInterface</code>
    </UndefinedClass>
  </file>
  <file src="test/LinkGenerator/MezzioUrlGeneratorFactoryTest.php">
    <MixedArgument>
      <code>CustomUrlHelper::class</code>
    </MixedArgument>
    <UndefinedClass>
      <code>CustomUrlHelper</code>
      <code>CustomUrlHelper</code>
      <code>CustomUrlHelper</code>
    </UndefinedClass>
  </file>
  <file src="test/LinkGeneratorFactoryTest.php">
    <DeprecatedMethod>
      <code>assertAttributeSame</code>
      <code>self::assertAttributeSame($urlGenerator, 'urlGenerator', $instance)</code>
      <code>self::assertAttributeSame($urlGenerator, 'urlGenerator', $instance)</code>
    </DeprecatedMethod>
    <MixedArgument>
      <code>UrlGenerator::class</code>
    </MixedArgument>
    <UndefinedClass>
      <code>UrlGenerator</code>
      <code>UrlGenerator</code>
      <code>UrlGenerator</code>
      <code>UrlGenerator</code>
    </UndefinedClass>
  </file>
  <file src="test/LinkTest.php">
    <ArgumentTypeCoercion>
      <code>$uri</code>
    </ArgumentTypeCoercion>
    <MixedArgument>
      <code>$name</code>
      <code>$name</code>
      <code>$rel</code>
      <code>$rel</code>
      <code>$uri</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <TooFewArguments>
      <code>new Link()</code>
    </TooFewArguments>
  </file>
  <file src="test/Metadata/ExceptionTest.php">
    <MixedInferredReturnType>
      <code>Generator</code>
    </MixedInferredReturnType>
    <PossiblyFalseOperand>
      <code>strrpos(ExceptionInterface::class, '\\')</code>
    </PossiblyFalseOperand>
  </file>
  <file src="test/Metadata/MetadataMapFactoryTest.php">
    <MixedInferredReturnType>
      <code>Generator</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/PHPUnitDeprecatedAssertions.php">
    <ArgumentTypeCoercion>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
      <code>$expected</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>static::getObjectAttribute(
                $classOrObject,
                $attributeName
            )</code>
      <code>static::getStaticAttribute(
                $classOrObject,
                $attributeName
            )</code>
      <code>static::readAttribute($actualClassOrObject, $actualAttributeName)</code>
      <code>static::readAttribute($classOrObject, $attributeName)</code>
      <code>static::readAttribute($haystackClassOrObject, $haystackAttributeName)</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code>is_object($object)</code>
    </DocblockTypeContradiction>
    <InternalClass>
      <code>new Exception(
            sprintf(
                'Argument #%d%sof %s::%s() must be a %s',
                $argument,
                $value !== null ? ' (' . gettype($value) . '#' . $value . ')' : ' (No Value) ',
                $stack[1]['class'] ?? '',
                $stack[1]['function'],
                $type
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Argument #%d%sof %s::%s() must be a %s',
                $argument,
                $value !== null ? ' (' . gettype($value) . '#' . $value . ')' : ' (No Value) ',
                $stack[1]['class'] ?? '',
                $stack[1]['function'],
                $type
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Argument #%d%sof %s::%s() must be a %s',
                $argument,
                $value !== null ? ' (' . gettype($value) . '#' . $value . ')' : ' (No Value) ',
                $stack[1]['class'] ?? '',
                $stack[1]['function'],
                $type
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Argument #%d%sof %s::%s() must be a %s',
                $argument,
                $value !== null ? ' (' . gettype($value) . '#' . $value . ')' : ' (No Value) ',
                $stack[1]['class'] ?? '',
                $stack[1]['function'],
                $type
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Argument #%d%sof %s::%s() must be a %s',
                $argument,
                $value !== null ? ' (' . gettype($value) . '#' . $value . ')' : ' (No Value) ',
                $stack[1]['class'] ?? '',
                $stack[1]['function'],
                $type
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in class.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in class.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in class.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in class.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in class.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in object.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in object.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in object.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in object.',
                $attributeName
            )
        )</code>
      <code>new Exception(
            sprintf(
                'Attribute "%s" not found in object.',
                $attributeName
            )
        )</code>
    </InternalClass>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$value</code>
    </MixedOperand>
    <PossiblyUndefinedArrayOffset>
      <code>$stack[1]</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantConditionGivenDocblockType>
      <code>is_object($classOrObject)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/ResourceGenerator/DoctrinePaginatorTest.php">
    <DeprecatedMethod>
      <code>setMethods</code>
    </DeprecatedMethod>
    <MixedInferredReturnType>
      <code>iterable</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/ResourceGenerator/ExceptionTest.php">
    <MixedInferredReturnType>
      <code>Generator</code>
    </MixedInferredReturnType>
    <PossiblyFalseOperand>
      <code>strrpos(ExceptionInterface::class, '\\')</code>
    </PossiblyFalseOperand>
  </file>
  <file src="test/ResourceGenerator/NestedCollectionResourceGenerationTest.php">
    <DeprecatedMethod>
      <code>assertInternalType</code>
      <code>assertInternalType</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$request</code>
    </InvalidArgument>
    <MixedAssignment>
      <code>$childCollection</code>
    </MixedAssignment>
  </file>
  <file src="test/ResourceGenerator/ResourceWithNestedInstancesTest.php">
    <InvalidArgument>
      <code>$request</code>
    </InvalidArgument>
  </file>
  <file src="test/ResourceGenerator/ResourceWithSelfReferringInstanceTest.php">
    <MixedArgument>
      <code>$hydrators-&gt;reveal()</code>
      <code>$linkGenerator-&gt;reveal()</code>
      <code>$metadataMap-&gt;reveal()</code>
    </MixedArgument>
    <PossiblyUndefinedMethod>
      <code>reveal</code>
      <code>reveal</code>
      <code>reveal</code>
    </PossiblyUndefinedMethod>
  </file>
  <file src="test/ResourceGenerator/RouteBasedCollectionWithRouteParamsTest.php">
    <InvalidArgument>
      <code>$linkGenerator</code>
      <code>$linkGenerator</code>
      <code>$linkGenerator</code>
      <code>$linkGenerator</code>
      <code>$linkGenerator</code>
      <code>$linkGenerator</code>
      <code>$linkGenerator</code>
      <code>$request</code>
      <code>$request</code>
      <code>$request</code>
      <code>$request</code>
      <code>$request</code>
      <code>$request</code>
      <code>$request</code>
      <code>Argument::that(function (array $params) use ($i) {
                        return array_key_exists('foo_id', $params)
                            &amp;&amp; array_key_exists('bar_id', $params)
                            &amp;&amp; $params['foo_id'] === 1234
                            &amp;&amp; $params['bar_id'] === $i;
                    })</code>
      <code>Argument::that(function (array $params) use ($page) {
                return array_key_exists('foo_id', $params)
                    &amp;&amp; array_key_exists('p', $params)
                    &amp;&amp; $params['foo_id'] === 1234
                    &amp;&amp; $params['p'] === $page;
            })</code>
    </InvalidArgument>
    <MixedArgument>
      <code>$request-&gt;reveal()</code>
      <code>$request-&gt;reveal()</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$this-&gt;createCollectionItems(
            $linkGenerator,
            $request
        )</code>
    </MixedArgumentTypeCoercion>
    <MixedMethodCall>
      <code>willReturn</code>
      <code>willReturn</code>
    </MixedMethodCall>
  </file>
  <file src="test/ResourceGenerator/UrlBasedCollectionWithRouteParamsTest.php">
    <InvalidArgument>
      <code>$linkGenerator</code>
      <code>$request</code>
      <code>Argument::that(function (array $params) use ($i) {
                        return array_key_exists('foo_id', $params)
                            &amp;&amp; array_key_exists('bar_id', $params)
                            &amp;&amp; $params['foo_id'] === 1234
                            &amp;&amp; $params['bar_id'] === $i;
                    })</code>
    </InvalidArgument>
    <MixedArgument>
      <code>$request-&gt;reveal()</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$this-&gt;createCollectionItems($linkGenerator, $request)</code>
    </MixedArgumentTypeCoercion>
    <MixedMethodCall>
      <code>willReturn</code>
    </MixedMethodCall>
  </file>
  <file src="test/ResourceGeneratorFactoryTest.php">
    <DeprecatedMethod>
      <code>assertAttributeSame</code>
      <code>assertAttributeSame</code>
    </DeprecatedMethod>
    <MissingDependency>
      <code>HydratorPluginManager</code>
      <code>HydratorPluginManager</code>
    </MissingDependency>
    <MixedArgument>
      <code>$this-&gt;container-&gt;reveal()</code>
      <code>$this-&gt;container-&gt;reveal()</code>
      <code>$this-&gt;container-&gt;reveal()</code>
      <code>$this-&gt;container-&gt;reveal()</code>
      <code>CustomLinkGenerator::class</code>
    </MixedArgument>
    <MixedMethodCall>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
    </MixedMethodCall>
    <PossiblyInvalidMethodCall>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
    </PossiblyInvalidMethodCall>
    <PossiblyUndefinedMethod>
      <code>reveal</code>
      <code>reveal</code>
      <code>reveal</code>
      <code>reveal</code>
    </PossiblyUndefinedMethod>
    <UndefinedClass>
      <code>CustomLinkGenerator</code>
      <code>CustomLinkGenerator</code>
      <code>CustomLinkGenerator</code>
      <code>CustomLinkGenerator</code>
    </UndefinedClass>
  </file>
  <file src="test/ResourceGeneratorTest.php">
    <DeprecatedMethod>
      <code>assertInternalType</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>Argument::that(function (array $params) use ($i) {
                        return array_key_exists('foo_bar_id', $params)
                            &amp;&amp; array_key_exists('test', $params)
                            &amp;&amp; $params['foo_bar_id'] === $i
                            &amp;&amp; $params['test'] === 'param';
                    })</code>
      <code>Argument::that(function (array $params) use ($i) {
                        return array_key_exists('foo_bar_id', $params)
                            &amp;&amp; array_key_exists('test', $params)
                            &amp;&amp; $params['foo_bar_id'] === $i
                            &amp;&amp; $params['test'] === 'param';
                    })</code>
      <code>Argument::that(function (array $params) {
                    return array_key_exists('foo_bar_id', $params)
                        &amp;&amp; array_key_exists('test', $params)
                        &amp;&amp; $params['foo_bar_id'] === 'XXXX-YYYY-ZZZZ'
                        &amp;&amp; $params['test'] === 'param';
                })</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
      <code>Argument::type('array')</code>
    </InvalidArgument>
    <MixedArgument>
      <code>$embedded</code>
      <code>$item</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$embedded</code>
      <code>$ids[]</code>
      <code>$item</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>Generator</code>
    </MixedInferredReturnType>
    <PossiblyUndefinedMethod>
      <code>shouldNotBeCalled</code>
      <code>shouldNotBeCalled</code>
      <code>shouldNotBeCalled</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
    </PossiblyUndefinedMethod>
    <TooFewArguments>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
      <code>fromRoute</code>
    </TooFewArguments>
    <UnsafeInstantiation>
      <code>new $metadata(
            TestAsset\FooBar::class,
            'foo-bar',
            '/api/foo'
        )</code>
    </UnsafeInstantiation>
  </file>
  <file src="test/TestAsset/Child.php">
    <MissingPropertyType>
      <code>$id</code>
      <code>$message</code>
    </MissingPropertyType>
  </file>
</files>
